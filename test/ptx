
Fatbin elf code:
================
arch = sm_70
code version = [1,7]
host = linux
compile_size = 64bit

Fatbin elf code:
================
arch = sm_70
code version = [1,7]
host = linux
compile_size = 64bit

Fatbin ptx code:
================
arch = sm_70
code version = [8,4]
host = linux
compile_size = 64bit
compressed
ptxasOptions = 

//
//
//
//
//
//

.version 8.4
.target sm_70
.address_size 64

//
.extern .func (.param .b32 func_retval0) vprintf
(
.param .b64 vprintf_param_0,
.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 $str[6] = {37, 108, 108, 100, 10};

.visible .entry _Z8baselinePi(
.param .u64 _Z8baselinePi_param_0
)
{
.local .align 8 .b8 __local_depot0[8];
.reg .b64 %SP;
.reg .b64 %SPL;
.reg .b32 %r<3>;
.reg .b64 %rd<10>;


mov.u64 %SPL, __local_depot0;
cvta.local.u64 %SP, %SPL;
ld.param.u64 %rd3, [_Z8baselinePi_param_0];
cvta.to.global.u64 %rd4, %rd3;
add.u64 %rd5, %SP, 0;
add.u64 %rd6, %SPL, 0;
//
{
mov.u64 %rd1, %clock64;
mov.s32 %r1, 1;
mov.u64 %rd2, %clock64;
}
//
sub.s64 %rd7, %rd2, %rd1;
st.global.u32 [%rd4], %r1;
st.local.u64 [%rd6], %rd7;
mov.u64 %rd8, $str;
cvta.global.u64 %rd9, %rd8;
{ //
.reg .b32 temp_param_reg;
.param .b64 param0;
st.param.b64 [param0+0], %rd9;
.param .b64 param1;
st.param.b64 [param1+0], %rd5;
.param .b32 retval0;
call.uni (retval0), 
vprintf, 
(
param0, 
param1
);
ld.param.b32 %r2, [retval0+0];
} //
ret;

}


