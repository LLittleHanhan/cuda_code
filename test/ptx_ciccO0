
Fatbin elf code:
================
arch = sm_70
code version = [1,7]
host = linux
compile_size = 64bit

Fatbin ptx code:
================
arch = sm_70
code version = [8,3]
host = linux
compile_size = 64bit
compressed








.version 8.3
.target sm_70
.address_size 64


.extern .func (.param .b32 func_retval0) vprintf
(
.param .b64 vprintf_param_0,
.param .b64 vprintf_param_1
)
;
.func (.param .b64 func_retval0) clock64
()
;
.global .align 1 .b8 $str[5] = {37, 108, 108, 100};

.visible .entry _Z8baselinev()
{
.local .align 8 .b8 __local_depot0[8];
.reg .b64 %SP;
.reg .b64 %SPL;
.reg .pred %p<3>;
.reg .b32 %r<3>;
.reg .b64 %rd<7>;


mov.u64 %SPL, __local_depot0;
cvta.local.u64 %SP, %SPL;
{ 
	.reg .b32 temp_param_reg;
.param .b64 retval0;
call.uni (retval0), 
clock64, 
(
);
ld.param.b64 %rd1, [retval0+0];
} 
	{ 
	.reg .b32 temp_param_reg;
.param .b64 retval0;
call.uni (retval0), 
clock64, 
(
);
ld.param.b64 %rd2, [retval0+0];
} 
	mov.u32 %r1, %tid.x;
setp.eq.s32 %p1, %r1, 0;
not.pred %p2, %p1;
@%p2 bra $L__BB0_2;
bra.uni $L__BB0_1;

$L__BB0_1:
sub.s64 %rd3, %rd1, %rd2;
st.u64 [%SP+0], %rd3;
mov.u64 %rd4, $str;
cvta.global.u64 %rd5, %rd4;
add.u64 %rd6, %SP, 0;
{ 
	.reg .b32 temp_param_reg;
.param .b64 param0;
st.param.b64 [param0+0], %rd5;
.param .b64 param1;
st.param.b64 [param1+0], %rd6;
.param .b32 retval0;
call.uni (retval0), 
vprintf, 
(
param0, 
param1
);
ld.param.b32 %r2, [retval0+0];
} 
	bra.uni $L__BB0_2;

$L__BB0_2:
ret;

}
.func (.param .b64 func_retval0) clock64()
{
.reg .b64 %rd<2>;



	mov.u64 %rd1, %clock64;

	st.param.b64 [func_retval0+0], %rd1;
ret;

}



Fatbin elf code:
================
arch = sm_70
code version = [1,7]
host = linux
compile_size = 64bit
